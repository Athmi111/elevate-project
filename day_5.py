# -*- coding: utf-8 -*-
"""day_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-t2djGAUstJQzoAPtSixDZQM1-fqGuu
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Load dataset
df = pd.read_csv("/content/sample_data/heart.csv")

# 2. Features & target
X = df.drop("target", axis=1)
y = df["target"]

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Decision Tree Classifier with depth control
dt = DecisionTreeClassifier(max_depth=3, random_state=42)
dt.fit(X_train, y_train)

# Accuracy
print("Decision Tree Accuracy:", dt.score(X_test, y_test))

# 5. Visualize Decision Tree
plt.figure(figsize=(15,8))
plot_tree(dt, feature_names=X.columns, class_names=["No Disease", "Disease"], filled=True)
plt.show()

# 6. Random Forest Classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Accuracy
print("Random Forest Accuracy:", rf.score(X_test, y_test))

# 7. Feature Importances (RF)
importances = pd.DataFrame({
    "Feature": X.columns,
    "Importance": rf.feature_importances_
}).sort_values(by="Importance", ascending=False)

sns.barplot(data=importances, x="Importance", y="Feature")
plt.title("Random Forest Feature Importances")
plt.show()

# 8. Cross-validation scores
dt_cv = cross_val_score(dt, X, y, cv=5).mean()
rf_cv = cross_val_score(rf, X, y, cv=5).mean()

print("Decision Tree CV Accuracy:", dt_cv)
print("Random Forest CV Accuracy:", rf_cv)