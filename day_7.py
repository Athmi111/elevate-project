# -*- coding: utf-8 -*-
"""day_7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/167sDBq2DcSXeXTP4_Tzo-GJt23P308XT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, ConfusionMatrixDisplay
from sklearn.decomposition import PCA

# 1. Load and prepare dataset
df = pd.read_csv("/content/data.csv")

# Separate features (X) and target (y)
# Drop the 'id' and 'Unnamed: 32' columns as they are not features.
# Use 'diagnosis' as the target variable.
X = df.drop(['id', 'diagnosis', 'Unnamed: 32'], axis=1)
y = df['diagnosis'].apply(lambda x: 1 if x == 'M' else 0) # Convert 'M' to 1 and 'B' to 0

# Normalize features
X_scaled = StandardScaler().fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 2. Train SVM models (manually chosen parameters)
svm_linear = SVC(kernel="linear", C=1).fit(X_train, y_train)
svm_rbf = SVC(kernel="rbf", C=1, gamma=0.5).fit(X_train, y_train)

# 3. Predictions & accuracy
print("Linear Kernel Accuracy:", accuracy_score(y_test, svm_linear.predict(X_test)))
print("RBF Kernel Accuracy:", accuracy_score(y_test, svm_rbf.predict(X_test)))

# 4. Decision boundary function
def plot_decision_boundary(model, X_pca, y, title, pca_model):
    x_min, x_max = X_pca[:, 0].min() - 1, X_pca[:, 0].max() + 1
    y_min, y_max = X_pca[:, 1].min() - 1, X_pca[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
                         np.arange(y_min, y_max, 0.02))

    # Transform the meshgrid back to the original feature space
    X_grid_pca = np.c_[xx.ravel(), yy.ravel()]
    X_grid_original = pca_model.inverse_transform(X_grid_pca)

    Z = model.predict(X_grid_original).reshape(xx.shape)

    plt.figure(figsize=(7, 5))
    sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=y, palette="coolwarm", edgecolor="k", s=70)
    plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.coolwarm)
    plt.title(title)
    plt.show()

# 5. Visualize
# Use only the first two principal components for visualization
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plot_decision_boundary(svm_linear, X_pca, y, "SVM Linear Kernel Decision Boundary (PCA)", pca)
plot_decision_boundary(svm_rbf, X_pca, y, "SVM RBF Kernel Decision Boundary (PCA)", pca)


# 6. Confusion Matrix for RBF
ConfusionMatrixDisplay.from_estimator(svm_rbf, X_test, y_test, cmap="coolwarm")
plt.show()