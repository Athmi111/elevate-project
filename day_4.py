# -*- coding: utf-8 -*-
"""day_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n8mE4-LpU5Lrhfl9hhzYUVxQircK2FcJ
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, precision_score, recall_score, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# 1. Load data
data = pd.read_csv("/content/sample_data/data.csv")

# Drop the 'id' and 'Unnamed: 32' column as they are not needed
data = data.drop(['id', 'Unnamed: 32'], axis=1)

# 2. Separate features and target
X = data.drop('diagnosis', axis=1)
y = data['diagnosis']

# Encode target variable
le = LabelEncoder()
y = le.fit_transform(y)

# 3. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Standardize features
scaler = StandardScaler()
X_train_std = scaler.fit_transform(X_train)
X_test_std = scaler.transform(X_test)

# 5. Fit Logistic Regression
model = LogisticRegression()
model.fit(X_train_std, y_train)

# 6. Predict probabilities and class labels
y_probs = model.predict_proba(X_test_std)[:, 1]
y_pred_default = (y_probs >= 0.5).astype(int)

# 7. Evaluation metrics
cm = confusion_matrix(y_test, y_pred_default)
precision = precision_score(y_test, y_pred_default)
recall = recall_score(y_test, y_pred_default)
roc_auc = roc_auc_score(y_test, y_probs)

print("Confusion Matrix:\n", cm)
print("Precision:", precision)
print("Recall:", recall)
print("ROC-AUC:", roc_auc)

# 8. Tune threshold (plotting)
fpr, tpr, thresholds = roc_curve(y_test, y_probs)

plt.plot(thresholds, tpr, label='True Positive Rate')
plt.plot(thresholds, 1 - fpr, label='1 - False Positive Rate')
plt.xlabel('Threshold')
plt.ylabel('Score')
plt.title('Threshold vs TPR / (1 - FPR)')
plt.legend()
plt.grid()
plt.show()

import pandas as pd
df = pd.read_csv('/content/sample_data/data.csv')
print(df.head())