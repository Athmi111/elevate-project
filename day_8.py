# -*- coding: utf-8 -*-
"""day_8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10mirw2BXXWBhlzDw--fumx1-3222ie8z
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score

# 1. Load dataset
df = pd.read_csv("/content/sample_data/Mall_Customers.csv")
print(df.head())

# Select features for clustering
X = df.iloc[:, [3, 4]].values  # Example: 'Annual Income' & 'Spending Score'

# Normalize
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# (Optional) PCA for 2D visualization if more than 2 features
# Uncomment if needed:
# pca = PCA(n_components=2)
# X_scaled = pca.fit_transform(X_scaled)

# 2. Elbow Method to find optimal K
wcss = []
K_range = range(1, 11)
for k in K_range:
    kmeans = KMeans(n_clusters=k, init="k-means++", random_state=42, n_init=10)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(7, 5))
plt.plot(K_range, wcss, marker='o')
plt.title("Elbow Method - Optimal K")
plt.xlabel("Number of Clusters")
plt.ylabel("WCSS")
plt.grid(True)
plt.show()

# 3. Fit K-Means with chosen K (say K=5)
kmeans = KMeans(n_clusters=5, init="k-means++", random_state=42, n_init=10)
labels = kmeans.fit_predict(X_scaled)

# 4. Silhouette Score
score = silhouette_score(X_scaled, labels)
print(f"Silhouette Score: {score:.3f}")

# 5. Visualize Clusters
plt.figure(figsize=(7, 5))
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=labels, cmap="viridis", s=50)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            s=200, c='red', label='Centroids', marker='X')
plt.title("K-Means Clusters")
plt.xlabel("Feature 1 (scaled)")
plt.ylabel("Feature 2 (scaled)")
plt.legend()
plt.show()